syntax = "proto3";
package raft_proto;

//internal raft service
service RaftRpc {
  // invoked by leader to replicate log entries; also used as heartbeat
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesReply);
  // invoked by candidates to receive votes from followers
  rpc RequestVotes (RequestVoteRequest) returns (RequestVoteReply);
}


message AppendEntriesRequest {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 prev_log_index = 3;
  uint64 prev_log_term = 4;
  message entry {
    uint64 index = 1;
    uint64 term = 2;
    string payload = 4;
  }
  repeated entry entries = 5;
  uint64 leader_commit = 6;
}

message AppendEntriesReply {
  uint64 term = 1;
  bool success = 2;
}


message RequestVoteRequest{
  uint64 term = 1;
  uint64 candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message RequestVoteReply{
  uint64 term = 1;
  bool vote_granted = 2;
}